// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: queries.sql

package db

import (
	"context"
	"database/sql"
)

const createPart = `-- name: CreatePart :execrows
INSERT INTO dim_part_v1
    (
    part_id,
    tenant_id,
    part_number,
    description,
    category,
    lifecycle_status,
    uom,
    spec_hash,
    bom_compatibility,
    default_supplier_id,
    qualified_supplier_ids,
    unit_cost,
    moq,
    lead_time_days_avg,
    lead_time_days_p95,
    quality_grade,
    compliance_flags,
    hazard_class,
    last_price_change,
    data_source,
    source_timestamp,
    ingestion_timestamp,
    schema_version
    )
VALUES
    (
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
        ?, ?, ?
)
`

type CreatePartParams struct {
	PartID               string
	TenantID             string
	PartNumber           string
	Description          string
	Category             sql.NullString
	LifecycleStatus      sql.NullString
	Uom                  sql.NullString
	SpecHash             sql.NullString
	BomCompatibility     sql.NullString
	DefaultSupplierID    sql.NullString
	QualifiedSupplierIds sql.NullString
	UnitCost             sql.NullFloat64
	Moq                  sql.NullInt64
	LeadTimeDaysAvg      sql.NullInt64
	LeadTimeDaysP95      sql.NullInt64
	QualityGrade         sql.NullString
	ComplianceFlags      sql.NullString
	HazardClass          sql.NullString
	LastPriceChange      sql.NullTime
	DataSource           sql.NullString
	SourceTimestamp      sql.NullTime
	IngestionTimestamp   sql.NullTime
	SchemaVersion        sql.NullString
}

func (q *Queries) CreatePart(ctx context.Context, arg CreatePartParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createPart,
		arg.PartID,
		arg.TenantID,
		arg.PartNumber,
		arg.Description,
		arg.Category,
		arg.LifecycleStatus,
		arg.Uom,
		arg.SpecHash,
		arg.BomCompatibility,
		arg.DefaultSupplierID,
		arg.QualifiedSupplierIds,
		arg.UnitCost,
		arg.Moq,
		arg.LeadTimeDaysAvg,
		arg.LeadTimeDaysP95,
		arg.QualityGrade,
		arg.ComplianceFlags,
		arg.HazardClass,
		arg.LastPriceChange,
		arg.DataSource,
		arg.SourceTimestamp,
		arg.IngestionTimestamp,
		arg.SchemaVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const createSupplier = `-- name: CreateSupplier :execrows
INSERT INTO dim_supplier_v1
    (
    supplier_id,
    supplier_code,
    tenant_id,
    legal_name,
    dba_name,
    country,
    region,
    address_line1,
    address_line2,
    city,
    state,
    postal_code,
    contact_email,
    contact_phone,
    preferred_currency,
    incoterms,
    lead_time_days_avg,
    lead_time_days_p95,
    on_time_delivery_rate,
    defect_rate_ppm,
    capacity_units_per_week,
    risk_score,
    financial_risk_tier,
    certifications,
    compliance_flags,
    approved_status,
    contracts,
    terms_version,
    lat,
    lon,
    data_source,
    source_timestamp,
    ingestion_timestamp,
    schema_version
    )
VALUES
    (
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
        ?, ?, ?, ?, ?, ?, ?, ?, ?, ?,
        ?, ?, ?, ?
)
`

type CreateSupplierParams struct {
	SupplierID           string
	SupplierCode         sql.NullString
	TenantID             string
	LegalName            string
	DbaName              sql.NullString
	Country              sql.NullString
	Region               sql.NullString
	AddressLine1         sql.NullString
	AddressLine2         sql.NullString
	City                 sql.NullString
	State                sql.NullString
	PostalCode           sql.NullString
	ContactEmail         sql.NullString
	ContactPhone         sql.NullString
	PreferredCurrency    sql.NullString
	Incoterms            sql.NullString
	LeadTimeDaysAvg      sql.NullInt64
	LeadTimeDaysP95      sql.NullInt64
	OnTimeDeliveryRate   sql.NullFloat64
	DefectRatePpm        sql.NullInt64
	CapacityUnitsPerWeek sql.NullInt64
	RiskScore            sql.NullFloat64
	FinancialRiskTier    sql.NullString
	Certifications       sql.NullString
	ComplianceFlags      sql.NullString
	ApprovedStatus       sql.NullString
	Contracts            sql.NullString
	TermsVersion         sql.NullString
	Lat                  sql.NullFloat64
	Lon                  sql.NullFloat64
	DataSource           sql.NullString
	SourceTimestamp      sql.NullTime
	IngestionTimestamp   sql.NullTime
	SchemaVersion        sql.NullString
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (int64, error) {
	result, err := q.db.ExecContext(ctx, createSupplier,
		arg.SupplierID,
		arg.SupplierCode,
		arg.TenantID,
		arg.LegalName,
		arg.DbaName,
		arg.Country,
		arg.Region,
		arg.AddressLine1,
		arg.AddressLine2,
		arg.City,
		arg.State,
		arg.PostalCode,
		arg.ContactEmail,
		arg.ContactPhone,
		arg.PreferredCurrency,
		arg.Incoterms,
		arg.LeadTimeDaysAvg,
		arg.LeadTimeDaysP95,
		arg.OnTimeDeliveryRate,
		arg.DefectRatePpm,
		arg.CapacityUnitsPerWeek,
		arg.RiskScore,
		arg.FinancialRiskTier,
		arg.Certifications,
		arg.ComplianceFlags,
		arg.ApprovedStatus,
		arg.Contracts,
		arg.TermsVersion,
		arg.Lat,
		arg.Lon,
		arg.DataSource,
		arg.SourceTimestamp,
		arg.IngestionTimestamp,
		arg.SchemaVersion,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const deletePart = `-- name: DeletePart :exec
DELETE FROM dim_part_v1 WHERE part_id = ?
`

func (q *Queries) DeletePart(ctx context.Context, partID string) error {
	_, err := q.db.ExecContext(ctx, deletePart, partID)
	return err
}

const deleteSupplier = `-- name: DeleteSupplier :exec
DELETE FROM dim_supplier_v1 WHERE supplier_id = ?
`

func (q *Queries) DeleteSupplier(ctx context.Context, supplierID string) error {
	_, err := q.db.ExecContext(ctx, deleteSupplier, supplierID)
	return err
}
